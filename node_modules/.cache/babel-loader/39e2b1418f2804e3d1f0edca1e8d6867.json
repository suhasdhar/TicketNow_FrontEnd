{"ast":null,"code":"export default {\n  data() {\n    return {\n      comments: {},\n      commentsnew: null,\n      nocommenterrot: false\n    };\n  },\n\n  methods: {\n    async addcomment() {\n      if (this.commentsnew === null) {\n        this.nocommenterrot = true;\n        return;\n      }\n\n      await fetch('http://localhost:8080/ticket-now/add-message', {\n        body: JSON.stringify({\n          'message': {\n            'comment': this.commentsnew,\n            'userId': this.id,\n            'username': this.id\n          },\n          'ticketId': this.ticketId\n        }),\n        headers: {\n          'Accept': 'application/json, text/plain',\n          'Content-Type': 'application/json;charset=UTF-8',\n          'ticketId': this.ticketId\n        },\n        method: 'POST',\n        mode: 'cors'\n      }).then(res => res.json()).then(data => {\n        // eslint-disable-next-line\n        console.log(data);\n      }). // eslint-disable-next-line\n      catch(error => console.log(error));\n      this.fetchChat();\n      this.commentsnew = null;\n    },\n\n    async fetchChat() {\n      // eslint-disable-next-line\n      console.log(this.ticket);\n      await fetch('http://localhost:8080/ticket-now/get-chats', {\n        headers: {\n          'Accept': 'application/json, text/plain',\n          'Content-Type': 'application/json;charset=UTF-8',\n          'ticketId': this.ticketId\n        },\n        method: 'get',\n        mode: 'cors'\n      }).then(res => res.json()).then(data => {\n        this.comments = data.message; // eslint-disable-next-line\n      }). // eslint-disable-next-line\n      catch(error => console.log(error));\n    }\n\n  },\n\n  mounted() {\n    // eslint-disable-next-line\n    console.log(this.id) + \" somethis???\";\n    this.fetchChat();\n  },\n\n  name: 'CommentsChat',\n  props: {\n    id: String,\n    ticket: Object,\n    ticketId: String\n  }\n};","map":{"version":3,"mappings":"AAsDA,eAAe;EAACA,IAAG,GAAK;IAEtB,OAAO;MAELC,QAAQ,EAAE,EAFL;MAGLC,WAAW,EAAE,IAHR;MAILC,cAAc,EAAE;IAJX,CAAP;EASD,CAXc;;EAYfC,OAAO,EAAE;IACP,MAAMC,UAAN,GAAoB;MAElB,IAAI,KAAKH,WAAL,KAAqB,IAAzB,EAA+B;QAE7B,KAAKC,cAAL,GAAsB,IAAtB;QACA;MAEF;;MACA,MAAMG,KAAK,CACT,8CADS,EAET;QAACC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UAAC,WAAW;YAChC,WAAW,KAAKP,WADgB;YAEhC,UAAU,KAAKQ,EAFiB;YAGhC,YAAY,KAAKA;UAHe,CAAZ;UAKtB,YAAY,KAAKC;QALK,CAAf,CAAP;QAMAC,OAAO,EAAE;UAAC,UAAU,8BAAX;UACP,gBAAgB,gCADT;UAEP,YAAY,KAAKD;QAFV,CANT;QASAE,MAAM,EAAE,MATR;QAUAC,IAAI,EAAE;MAVN,CAFS,CAAL,CAaJC,IAbI,CAaEC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAbV,EAcJF,IAdI,CAcEf,IAAD,IAAU;QAEb;QACQkB,OAAO,CAACC,GAAR,CAAYnB,IAAZ;MACT,CAlBG,GAmBJ;MACEoB,KApBE,CAoBKC,KAAD,IAAWH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CApBf,CAAN;MAqBA,KAAKC,SAAL;MACA,KAAKpB,WAAL,GAAmB,IAAnB;IAED,CAjCM;;IAmCP,MAAMoB,SAAN,GAAmB;MAEjB;MACJJ,OAAO,CAACC,GAAR,CAAY,KAAKI,MAAjB;MAEI,MAAMjB,KAAK,CACT,4CADS,EAET;QAACM,OAAO,EAAE;UAAC,UAAU,8BAAX;UACR,gBAAgB,gCADR;UAER,YAAY,KAAKD;QAFT,CAAV;QAGAE,MAAM,EAAE,KAHR;QAIAC,IAAI,EAAE;MAJN,CAFS,CAAL,CAOJC,IAPI,CAOEC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPV,EAQJF,IARI,CAQEf,IAAD,IAAU;QAEb,KAAKC,QAAL,GAAgBD,IAAI,CAACwB,OAArB,CAFa,CAGb;MAED,CAbG,GAcJ;MACEJ,KAfE,CAeKC,KAAD,IAAWH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAff,CAAN;IAgBD;;EAxDM,CAZM;;EAwEfI,OAAM,GAAK;IAET;IACAP,OAAO,CAACC,GAAR,CAAY,KAAKT,EAAjB,IAAqB,cAArB;IACA,KAAKY,SAAL;EAED,CA9Ec;;EA+EfI,IAAI,EAAE,cA/ES;EAgFfC,KAAK,EAAE;IAELjB,EAAE,EAAEkB,MAFC;IAGLL,MAAM,EAAEM,MAHH;IAILlB,QAAQ,EAAEiB;EAJL;AAhFQ,CAAf","names":["data","comments","commentsnew","nocommenterrot","methods","addcomment","fetch","body","JSON","stringify","id","ticketId","headers","method","mode","then","res","json","console","log","catch","error","fetchChat","ticket","message","mounted","name","props","String","Object"],"sourceRoot":"","sources":["/Users/suhasdhar/Desktop/Development/TicketNow_front/ticket_now/src/components/CommentsChat.vue"],"sourcesContent":["<template>\n<div>\n    <br><br>\n    <div class=\"comment-box\">\n\n        <div class=\"comment-thread\" v-for=\"item in this.comments\" :key=\"item\">\n    <!-- Comment 1 start -->\n    <div class=\"comment\" id=\"comment-1\">\n        <div class=\"comment-heading\">\n            <div class=\"comment-voting\">\n                <button type=\"button\">\n                    <span aria-hidden=\"true\">&#9650;</span>\n                    <span class=\"sr-only\">Vote up</span>\n                </button>\n                <button type=\"button\">\n                    <span aria-hidden=\"true\">&#9660;</span>\n                    <span class=\"sr-only\">Vote down</span>\n                </button>\n            </div>\n            <div class=\"comment-info\">\n                <a href=\"#\" class=\"comment-author\">{{item.username}}</a>\n            </div>\n        </div>\n\n        <div class=\"comment-body\">\n            <p>\n               {{item.comment}}\n            </p>\n        </div>\n\n    </div>\n    <!-- Comment 1 end -->\n    <hr>\n    </div>\n\n</div>\n\n<br><br>\n    <textarea\n            cols=\"50\"\n            rows=\"10\"\n            id:=\"comment-textbox\"\n            required\n            placeholder=\"Add your comment\"\n            v-model=\"commentsnew\"\n          />\n          <br><br>\n          <button @click=\"addcomment()\"> Add Comment</button>\n          <div v-if=\"this.nocommenterrot\" class=\"error\"> The comment cant be empty</div>\n</div>\n\n</template>\n\n<script>\nexport default {data () {\n\n  return {\n\n    comments: {},\n    commentsnew: null,\n    nocommenterrot: false\n\n\n  };\n\n},\nmethods: {\n  async addcomment () {\n\n    if (this.commentsnew === null) {\n\n      this.nocommenterrot = true;\n      return;\n\n    }\n    await fetch(\n      'http://localhost:8080/ticket-now/add-message',\n      {body: JSON.stringify({'message': {\n        'comment': this.commentsnew,\n        'userId': this.id,\n        'username': this.id,\n      },\n      'ticketId': this.ticketId}),\n      headers: {'Accept': 'application/json, text/plain',\n        'Content-Type': 'application/json;charset=UTF-8',\n        'ticketId': this.ticketId},\n      method: 'POST',\n      mode: 'cors'}\n    ).then((res) => res.json()).\n      then((data) => {\n\n        // eslint-disable-next-line\n                console.log(data);\n      }).\n      // eslint-disable-next-line\n        catch((error) => console.log(error));\n    this.fetchChat();\n    this.commentsnew = null;\n\n  },\n\n  async fetchChat () {\n\n    // eslint-disable-next-line\nconsole.log(this.ticket)\n\n    await fetch(\n      'http://localhost:8080/ticket-now/get-chats',\n      {headers: {'Accept': 'application/json, text/plain',\n        'Content-Type': 'application/json;charset=UTF-8',\n        'ticketId': this.ticketId},\n      method: 'get',\n      mode: 'cors'}\n    ).then((res) => res.json()).\n      then((data) => {\n\n        this.comments = data.message;\n        // eslint-disable-next-line\n      \n      }).\n      // eslint-disable-next-line\n        catch((error) => console.log(error));\n  },\n\n},\n\nmounted () {\n\n  // eslint-disable-next-line\n  console.log(this.id)+\" somethis???\";\n  this.fetchChat();\n\n},\nname: 'CommentsChat',\nprops: {\n\n  id: String,\n  ticket: Object,\n  ticketId: String\n\n}};\n\n\n</script>\n\n<style : scoped>\n\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n    line-height: 1.4;\n    color: rgba(0, 0, 0, 0.85);\n    background-color: #f9f9f9;\n\n}\nbutton {\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    appearance: none;\n    font-size: 14px;\n    padding: 4px 8px;\n    color: rgba(0, 0, 0, 0.85);\n    background-color: #fff;\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n}\nbutton:hover,\nbutton:focus,\nbutton:active {\n    cursor: pointer;\n    background-color: #ecf0f1;\n}\n.comment-thread {\n    width: 700px;\n    max-width: 100%;\n    margin: auto;\n    padding: 0 30px;\n    background-color: #fff;\n    border: 1px solid transparent; /* Removes margin collapse */\n}\n.m-0 {\n    margin: 0;\n}\n.sr-only {\n    position: absolute;\n    left: -10000px;\n    top: auto;\n    width: 1px;\n    height: 1px;\n    overflow: hidden;\n}\n\n/* Comment */\n\n.comment {\n    position: relative;\n    margin: 20px auto;\n}\n.comment-heading {\n    display: flex;\n    align-items: center;\n    height: 50px;\n    font-size: 14px;\n}\n.comment-voting {\n    width: 20px;\n    height: 32px;\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n}\n.comment-voting button {\n    display: block;\n    width: 100%;\n    height: 50%;\n    padding: 0;\n    border: 0;\n    font-size: 10px;\n}\n.comment-info {\n    color: rgba(0, 0, 0, 0.5);\n    margin-left: 10px;\n}\n.comment-author {\n    color: rgba(0, 0, 0, 0.85);\n    font-weight: bold;\n    text-decoration: none;\n}\n.comment-author:hover {\n    text-decoration: underline;\n}\n.replies {\n    margin-left: 20px;\n}\n\n.error{\n\n    color: red;\n}\n.comment-thread{\n    width: 50%;\n    height: 100px;\n    -moz-border-radius: 100px / 50px;\n    -webkit-border-radius: 100px / 178px;\n    border-radius: 694px / 208px;\n\n    z-index: 100;\n    position: relative;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}